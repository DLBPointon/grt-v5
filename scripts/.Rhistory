jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
attach(jira_data)
date <- format(Sys.Date(), "%d%m%y")
jira_data_file <- sprintf("./jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
attach(jira_data)
date <- format(Sys.Date(), "%d%m%y")
jira_data_file <- sprintf("./jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
attach(jira_data)
date <- format(Sys.Date(), "%d%m%y")
jira_data_file <- sprintf("./jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
date <- format(Sys.Date(), "%d%m%y")
jira_data_file <- sprintf("./jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
date <- format(Sys.Date(), "%d%m%y")
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) #  line currently must be hard coded to available data sheet
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
attach(jira_data)
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) #  line currently must be hard coded to available data sheet
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data_file <- sprintf("/Users/dp24/Documents/grit-realtime/scripts/jira_dump_020221.tsv.sorted", date) #  line currently must be hard coded to available data sheet
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
attach(jira_data)
runApp('~/Documents/grit-realtime/scripts')
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) #  line currently must be hard coded to available data sheet
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data_file <- sprintf("./jira_dump_020221.tsv.sorted", date) #  line currently must be hard coded to available data sheet
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
getwd()
runApp('~/Documents/grit-realtime/scripts')
getwd()
setwd("../scripts") # Change to save_loc in future
date <- format(Sys.Date(), "%d%m%y")
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
nrow(jira_data)
names(jira_data)
run shinytest::installDependencies()
shinytest::installDependencies()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
# An R script to take jira_dump data and produce
# descriptive statistics and graphs
# Written by dp24
# Updated January 2020
# Modules Required
require("ggplot2")
require("stringr")
require('dplyr')
require('gridExtra')
library(tidyr)
require("plotly")
# File Handling
filename <- args[1]
setwd("../scripts") # Change to save_loc in future
date <- format(Sys.Date(), "%d%m%y")
jira_data_file <- sprintf("jira_dump_020221.tsv.sorted", date) # jira_dump_%s.tsv.sorted
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
attach(jira_data)
str(jira_data)
as.Date(jira_data$date_in_YMD, "%Y-%m-%d")
str(jira_data)
jira_data$date_in_YMD <- as.Date(jira_data$date_in_YMD, "%Y-%m-%d")
str(jira_data)
ggplot(jira_data, aes(date_in_YMD, length.change, labels = prefix))
ggplot(jira_data, aes(date_in_YMD, length.change, labels = prefix)) +
geom_point()
ggplot(jira_data, aes(date_in_YMD, length.change, labels = prefix)) +
geom_bar()
ggplot(jira_data, aes(date_in_YMD, length.change, labels = prefix)) +
geom_bar()
ggplot(jira_data, aes(date_in_YMD, length.change, labels = prefix)) +
geom_point()
jira_data <- read.csv(jira_data_file, sep='\t', header=T, row.names=NULL)
attach(jira_data)
jira_data$prefix <- str_extract(X.sample_id, '[[:lower:]]+') # pulls first letters for use as categorisers
jira_data$length.change <- as.numeric(as.character(length.change)) # Stop gap measure
jira_data$normalized_by_len <- ((length.after - min(length.after)) / (max(length.after) - min(length.after))) * 1000000
jira_data$test <- (manual_interventions/length.before) * 1000000000
jira_data$mb_len <- length.before/1000000 # Equivilent to length in Gb * 1000 for length in Mb
attach(jira_data)
str(jira_data)
jira_data$date_in_YMD <- as.Date(jira_data$date_in_YMD, "%Y-%m-%d")
str(jira_data)
ggplot(jira_data, aes(date_in_YMD, length.change, labels = prefix)) +
geom_point()
ggplot(jira_data, aes(date_in_YMD) +
ggplot(jira_data, aes(date_in_YMD)) +
geom_point()
ggplot(jira_data, aes(date_in_YMD)) +
geom_point()
ggplot(jira_data, aes(date_in_YMD, num(jira_data[, "date_in_YMD"]))) +
geom_point()
ggplot(jira_data, aes(date_in_YMD, nrows(jira_data[, "date_in_YMD"]))) +
geom_point()
ggplot(jira_data, aes(date_in_YMD, nrow(jira_data[, "date_in_YMD"]))) +
geom_point()
ggplot(jira_data %>% count(date_in_YMD), aes(x = date_in_YMD, n)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = poisson)) +
scale_y_continuous(limits = c(0,9), breaks = seq(0,9,2)) +
labs(x = "Publication Date")
x <- ggplot(jira_data %>% count(date_in_YMD), aes(x = date_in_YMD, n)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = poisson)) +
scale_y_continuous(limits = c(0,9), breaks = seq(0,9,2)) +
labs(x = "Publication Date")
x
x <- ggplot(jira_data %>% count(date_in_YMD), aes(x = date_in_YMD, n)) +
geom_point()+
scale_y_continuous(limits = c(0,9), breaks = seq(0,9,2)) +
labs(x = "Publication Date")
x
x <- ggplot(jira_data %>% count(date_in_YMD), aes(x = date_in_YMD, n)) +
geom_point() +
scale_y_continuous(limits = c(0,9), breaks = seq(0,9,2)) +
labs(x = "Publication Date")
x
box_plot <- function(dataframe) {
ggplot(jira_data,
aes(prefix, length.change, colour=prefix,fill = prefix))+
geom_boxplot()+
facet_wrap(~prefix , scales = "free")
boxploted <- plotly::ggplotly()
htmlwidgets::saveWidget(as_widget(boxploted), 'boxplot_all.html')
}
box_plot(jira_data)
library(tidyverse)
x <- ggplot(jira_data %>% count(date_in_YMD), aes(x = date_in_YMD, n)) +
geom_point() +
scale_y_continuous(limits = c(0,9), breaks = seq(0,9,2)) +
labs(x = "Publication Date")
x
x <- ggplot(jira_data %>% count(date_in_YMD), aes(x = date_in_YMD, n)) +
geom_point() +
labs(x = "Date")
x
x
x <- setNames(data.frame(table(jira_data$date_in_YMD)),c("Date","Count"))
x
ggplot(x, aes(x$Date, x$Count)) +
geom_line()
x <- setNames(data.frame(table(jira_data$date_in_YMD)),c("Date","Count"))
y <- ggplot(x, aes(x$Date, x$Count)) +
geom_line()
y
y <- ggplot(x, aes(Date, Count)) +
geom_line()
y
y <- ggplot(jira_data, aes(date_in_YMD, manual_interventions)) +
geom_line()
y
y <- ggplot(jira_data, aes(date_in_YMD, manual_interventions)) +
geom_line()
y
ggplot(jira_data, aes(date_in_YMD, nrow(jira_data[, "date_in_YMD"]))) +
geom_point()
y <- ggplot(jira_data, aes(date_in_YMD, manual_interventions)) +
geom_line()
y
plot(cars)
plot(cars)
options(device = "RStudioGD")
plot(cars)
dev.off()
dev.off()
plot(cars)
y <- ggplot(jira_data, aes(date_in_YMD, manual_interventions)) +
geom_line()
y
y <- ggplot(x, aes(Date, Count)) +
geom_line()
y <- ggplot(x, aes(Date, Count)) +
geom_line()
y
y <- ggplot(jira_data, aes(date_in_YMD, length.change)) +
geom_line()
y
il_data <- jira_data[, prefix] == "il"
il_data <- jira_data[prefix, ] == "il"
il_data <- jira_data[prefix, ] == "il"
il_data <- jira_data %>% filter(prefix == 'il')
ggplot(il_data, aes(date_in_YMD, manual_interventions, labels=X.sample_id)) +
geom_line()
ggplot() +
geom_line(il_data, aes(date_in_YMD, manual_interventions, labels=X.sample_id))
ggplot(il_data, aes(date_in_YMD, length.change, labels=X.sample_id)) +
geom_line()
ggplot(il_data, aes(date_in_YMD, length.change)) +
geom_line()
ggplot(jira_data, aes(date_in_YMD, length.change)) +
geom_line()
ggplot(il_data, aes(date_in_YMD, length.change)) +
geom_point()
ggplot(jira_data, aes(date_in_YMD, length.change)) +
geom_point()
ggplot(jira_data, aes(date_in_YMD, length.change)) +
geom_point() +
geom_smooth()
ggplot(jira_data, aes(date_in_YMD, length.change, label = X.sample_id)) +
geom_point() +
geom_smooth()
ggplot(jira_data, aes(date_in_YMD, length.change, label = X.sample_id)) +
geom_point() +
geom_smooth()
plotly()
ggplotly()
ggplot(jira_data, aes(date_in_YMD, length.change, label = X.sample_id, colours = prefix)) +
geom_point() +
geom_smooth()
ggplotly()
ggplot(jira_data, aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) +
geom_point() +
geom_smooth()
ggplotly()
gplot(il_data, aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) +
geom_point()
ggplot(il_data, aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) +
geom_point()
ggplot(il_data, aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) +
geom_point() +
geom_smooth()
ggplot(jira_data, aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) +
geom_point() +
geom_smooth('lm')
ggplot(jira_data, aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) +
geom_point() +
geom_smooth('lm')
ggplotly()
ggplot(il_data, aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) +
geom_point() +
geom_smooth('lm')
ggplot(il_data, aes(date_in_YMD, length.change)) +
geom_point() +
geom_smooth('lm')
il_data <- jira_data %>% filter(prefix == 'il')
ggplot(il_data,
aes(date_in_YMD, length.change)) +
geom_point() +
geom_smooth('lm')
ggplot(il_data,
aes(date_in_YMD, length.change)) +
geom_point(mapping = aes(date_in_YMD, length.change)) +
geom_smooth('lm')
rlang::last_error()
il_data %>%
ggplot(aes(date_in_YMD, length.change)) +
geom_point(mapping = aes(date_in_YMD, length.change)) +
geom_smooth("lm")
il_data %>%
ggplot(aes(date_in_YMD, length.change)) +
geom_point() +
geom_smooth("lm")
il_data %>%
ggplot(aes(date_in_YMD, length.change)) +
geom_point(stat = 'identity', position = 'identity', aes(colour = prefix)) +
geom_smooth("lm")
il_data %>%
ggplot(aes(date_in_YMD, length.change)) + geom_point(stat = 'identity', position = 'identity') + geom_smooth("lm")
il_data %>% ggplot(aes(date_in_YMD, length.change)) + geom_point(stat = 'identity') + geom_smooth("lm")
il_data %>% ggplot() + geom_point(mapping = aes(date_in_YMD, length.change)) + geom_smooth("lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change)) + geom_smooth("lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change)) #+ geom_smooth("lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change)) + geom_smooth(aes(date_in_YMD, length.change), method = "lm")
ggplot(il_data) +  geom_smooth() + geom_point(mapping = aes(date_in_YMD, length.change))
ggplot(il_data, aes(date_in_YMD, length.change)) +  geom_smooth() + geom_point()
ggplot(il_data, aes(date_in_YMD, length.change)) +  geom_smooth('lm') + geom_point()
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change)) + geom_smooth(aes(date_in_YMD, length.change), method = "lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change)) + geom_smooth(aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix), method = "lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change)) + geom_smooth(aes(date_in_YMD, length.change, colour = prefix), method = "lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change, labl = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change), method = "lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change, label = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change), method = "lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change), method = "lm")
ggplotly()
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change, colour = 'blue'), method = "lm")
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, length.change, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change, colour = 'Trend'), method = "lm")
ggplotly()
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, manual_interventions, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change, colour = 'Trend'), method = "lm")
ggplotly()
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, manual_interventions, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change, colour = 'Trend'), method = "lm")
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, manual_interventions/length.after, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change, colour = 'Trend'), method = "lm")
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change, colour = 'Trend'), method = "lm")
il_data <- normalized_mi <- manual_interventions/length.after
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, length.change, colour = 'Trend'), method = "lm")
ggplotly()
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix))
ggplotly()
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(lm)
ggplotly()
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) +
geom_smooth("lm")
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) +
geom_smooth("lm")
ggplotly()
ggplot(jira_data) + geom_point(stat='identity', position='identity', aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) +
geom_smooth(method = "lm")
ggplotly()
ggplot(jira_data) + geom_point(stat='identity', position='identity', mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) +
geom_smooth(method = "lm")
ggplotly()
ggplot(il_data) + geom_point(stat='identity', position='identity', mapping = aes(x = date_in_YMD, y = normalized_mi, labels = X.sample_id, colour = prefix)) +
geom_smooth(method = "lm")
ggplotly()
ggplot(il_data) + geom_point(stat='identity', position='identity', mapping = aes(x = date_in_YMD, y = normalized_mi, labels = X.sample_id, colour = prefix)) +
geom_smooth(method = "lm", aes(x = date_in_YMD, y = normalized_mi))
ggplotly()
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data <- jira_data %>% filter(prefix == 'il')
il_data<-normalized_mi <- (manual_interventions/length.after)*1000000000
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data<-normalized_mi <- (manual_interventions/length.after)*1000000
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data <- jira_data %>% filter(prefix == 'f')
il_data<-normalized_mi <- (manual_interventions/length.after)*1000000
ggplot(jira_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data <- jira_data %>% filter(prefix == 'f')
il_data<-normalized_mi <- (manual_interventions/length.after)*1000000
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data<-normalized_mi <- (manual_interventions/length.after)*1000000
il_data <- jira_data %>% filter(prefix == 'f')
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data$normalized_mi <- (manual_interventions/length.after)*1000000
il_data <- jira_data %>% filter(prefix == 'f')
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
rlang::last_error()
il_data$normalized_mi
il_data$normalized_mi <- (manual_interventions/length.after)*1000000
il_data <- jira_data %>% filter(prefix == 'f')
il_data$normalized_mi <- (manual_interventions/length.after)*1000000
il_data <- jira_data %>% filter(prefix == 'f')
il_data$normalized_mi <- (manual_interventions/length.after)*1000000
il_data <- jira_data %>% filter(prefix == 'f')
il_data$normalized_mi <- (il_data$manual_interventions/il_data$length.after)*1000000
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data <- jira_data %>% filter(prefix == 'id')
il_data$normalized_mi <- (il_data$manual_interventions/il_data$length.after)*1000000
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
il_data <- jira_data %>% filter(prefix == 'il')
il_data$normalized_mi <- (il_data$manual_interventions/il_data$length.after)*1000000
ggplot(il_data) + geom_point(mapping = aes(date_in_YMD, normalized_mi, labels = X.sample_id, colour = prefix)) + geom_smooth(aes(date_in_YMD, normalized_mi, colour = 'Trend'), method = "lm")
ggplotly()
runApp()
runApp()
runApp()
min(jira_data$date_in_YMD)
runApp()
max(jira_data$date_in_YMD)
runApp()
runApp()
runApp()
runApp()
runApp()
View(il_data)
View(jira_data)
View(jira_data)
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
warnings()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
runApp()
warning()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
library(rsconnect)
rsconnect::setAccountInfo(name='grit-realtime',
token='8DF9C6184CDFC7518FD2410CDB9CFCCC',
secret='H7pCRq1CLAJGTkmq98utlSODObmYAWQk/yKfcvfl')
rsconnect::deployApp('/Users/dp24/Documents/grit-realtime/scripts')
build()
library('pkgbuild')
build()
getwd()
build(path = './')
build(path='./')
build(path='../')
build(path='/Users/dp24/Documents/grit-realtime/scripts')
build(path='/Users/dp24/Documents/grit-realtime/scripts/app.R')
build(path='/Users/dp24/Documents/grit-realtime/scripts/app.R',
binary=FALSE)
runApp()
runApp()
remotes::install_local('/Users/dp24/Documents/grit-realtime/scripts/')
options(
usethis.description = list(
`Authors@R` = 'person("Damon-Lee", "Pointon", email="dp24@sanger.ac.uk",
role=c("aut", "cre")',
Language="eng"
)
)
usethis::create_package("/Users/dp24/Documents/grit-realtime/scripts")
usethis::create_package("/Users/dp24/Documents/grit-realtime/scripts")
